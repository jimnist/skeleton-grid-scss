//
// skeleton grid port to scss
//
//
// magic mixins
//
// see: https://github.com/ngn33r/skeleton-grid-scss
//

// El Grid
@mixin _grid($width) {

  $column-width: ($width - ($grid-columns * $grid-gutter)) / $grid-columns;

  .container {
    @for $i from 1 through $grid-columns {
       @if ( $i == 1 ) {
        .#{numToString($i)}.column,
        .#{numToString($i)}.columns { width: $column-width; }
      } @else {
        .#{numToString($i)}.columns { width: $column-width + ( ( $column-width + $grid-gutter ) * ( $i - 1 ) ); }
      }
    }
    .one-third.column { width: ( $width / 3 ) - $grid-gutter}
    .two-thirds.column { width: ( ( $width * 2 ) / 3 ) - $grid-gutter }

    @for $i from 1 through ( $grid-columns - 1 ) {
      .offset-by-#{numToString($i)} { padding-left: ( $column-width + $grid-gutter ) * $i; }
    }
  }
}

// _mobileGrid ( number $width, number $grid-columns )
// @mixin _mobileGrid($width, $grid-columns) {
//   .container { width: $width; }
//   .container {
//     @for $i from 1 through $grid-columns {
//       @if ( $i == 1 ) {
//         .#{numToString($i)}.column { width: $width; }
//       } @else {
//         // .#{numToString($i)}.columns { width: $width; }
//       }
//     }
//     @include _group($grid-columns, ".columns", "after") { width: $width; }
//     .one-third.column { width: $width; }
//     .two-third.column { width: $width; }
//     @include _mobileOffset($grid-columns);
//   }
// }

// _mobileOffset ( number $grid-columns )
// @mixin _mobileOffset($grid-columns) {
//   @include _group($grid-columns - 1, "offset-by-") { padding-left: 0; }
// }

// _group ( number $stop, string $selector, [ string $pos: "before" ] )
// @mixin _group($stop, $selector, $pos: "before") {
//   $store: "";
//   @if(type-of($stop) != "number") {
//     @warn "Stop must be a number! #{type-of($stop)} was provided.";
//   }
//   @if($pos == "after") {
//     @for $i from 1 through $stop {
//       $store: $store + "." + numToString($i) + $selector + ",";
//     }
//   } @else {
//     @for $i from 1 through $stop {
//       $store: $store + "." + $selector + numToString($i) + ",";
//     }
//   }
//   #{$store} {
//     @content;
//   }
// }