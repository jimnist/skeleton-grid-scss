//
// skeleton grid port to scss
//
//
// magic mixins
//
// see: https://github.com/ngn33r/skeleton-grid-scss
//

@import 'variables';


@mixin grid($width: $baseWidth, $colWidth: $baseColWidth, $gutterWidth: $baseGutterWidth, $colCount: $baseColCount) {
  @include _fixedGrid($width, $colWidth, $gutterWidth, $colCount);
}

@mixin mobileGrid($width: $baseWidth, $colCount: $baseColCount) {
  @include _mobileGrid($width, $colCount);
}

@mixin _fixedGrid($width, $colWidth, $gutterWidth, $colCount) {
  .container {
    .column,
    .columns {
      margin: {
        left: $gutterWidth / 2;
        right: $gutterWidth / 2;
      };
    }
  }
  /* The Grid */
  .container {
    @for $i from 1 through $colCount {
       @if ( $i == 1 ) {
        .#{numToString($i)}.column,
        .#{numToString($i)}.columns { width: $colWidth; }
      } @else {
        .#{numToString($i)}.columns { width: $colWidth + ( ( $colWidth + $gutterWidth ) * ( $i - 1 ) ); }
      }
    }
    .one-third.column { width: ( $width / 3 ) - 20}
    .two-thirds.column { width: ( ( $width * 2 ) / 3 ) - 20 }
    @include _offset("px", $colCount, $colWidth);
  }
}

// _offset ( string $unit, number $colCount, number $colWidth )
@mixin _offset($unit, $colCount, $colWidth) {
  @if ( $unit == "%" ) {
    @for $i from 1 through ( $colCount - 1 ) {
      .offset-by-#{numToString($i)} { padding-left: ( ( 100 * $i ) / $colCount )#{$unit}; }
    }
  } @else {
    @for $i from 1 through ( $colCount - 1 ) {
      .offset-by-#{numToString($i)} { padding-left: ( $colWidth + 20 ) * $i; }
    }
  }
}

// _mobileGrid ( number $width, number $colCount )
@mixin _mobileGrid($width, $colCount) {
  .container { width: $width; }
  .container {
    @for $i from 1 through $colCount {
      @if ( $i == 1 ) {
        .#{numToString($i)}.column { width: $width; }
      } @else {
        // .#{numToString($i)}.columns { width: $width; }
      }
    }
    @include _group($colCount, ".columns", "after") { width: $width; }
    .one-third.column { width: $width; }
    .two-third.column { width: $width; }
    @include _mobileOffset($colCount);
  }
}

// _mobileOffset ( number $colCount )
@mixin _mobileOffset($colCount) {
  @include _group($colCount - 1, "offset-by-") { padding-left: 0; }
}

// _group ( number $stop, string $selector, [ string $pos: "before" ] )
@mixin _group($stop, $selector, $pos: "before") {
  $store: "";
  @if(type-of($stop) != "number") {
    @warn "Stop must be a number! #{type-of($stop)} was provided.";
  }
  @if($pos == "after") {
    @for $i from 1 through $stop {
      $store: $store + "." + numToString($i) + $selector + ",";
    }
  } @else {
    @for $i from 1 through $stop {
      $store: $store + "." + $selector + numToString($i) + ",";
    }
  }
  #{$store} {
    @content;
  }
}